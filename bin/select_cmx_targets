#!/usr/bin/env python

from __future__ import print_function, division

import sys
import numpy as np
import fitsio

from desitarget import io
from desitarget.cmx.cmx_cuts import select_targets

from time import time
start = time()

#import warnings
#warnings.simplefilter('error')

import multiprocessing
nproc = multiprocessing.cpu_count() // 2
nside = io.desitarget_nside()

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser(description='Generates DESI commissioning (cmx) target bits from Legacy Surveys sweeps or tractor files')
ap.add_argument("src", 
                help="Tractor/sweeps file or root directory with tractor/sweeps files")
ap.add_argument("dest", 
                help="Output cmx target selection file")
ap.add_argument("--numproc", type=int,
                help='number of concurrent processes to use [{}]'.format(nproc),
                default=nproc)

ns = ap.parse_args()
infiles = io.list_sweepfiles(ns.src)
if len(infiles) == 0:
    infiles = io.list_tractorfiles(ns.src)
if len(infiles) == 0:
    log.critical('no sweep or tractor files found')
    sys.exit(1)

# ADM Only coded for objects with Gaia matches
# ADM (e.g. DR6 or above). Fail for earlier Data Releases.
# ADM Guard against a single file being passed.
fn = infiles
if ~isinstance(infiles, str):
    fn = infiles[0]
data = fitsio.read(fn, columns=["RELEASE","PMRA"])
if np.any(data["RELEASE"] < 6000):
    log.critical('Commissioning cuts only coded for DR6 or above')
    raise ValueError
if (np.max(data['PMRA']) == 0.) & np.any(data["RELEASE"] < 7000):
    d = "/project/projectdirs/desi/target/gaia_dr2_match_dr6"
    log.info("Zero objects have a proper motion.")
    log.critical(
        "Did you mean to send the Gaia-matched sweeps in, e.g., {}?"
        .format(d)
    )
    raise IOError

log.info("running on {} processors".format(ns.numproc))

targets = select_targets(infiles, numproc=ns.numproc)

io.write_targets(ns.dest, targets, indir=ns.src, survey="cmx", nside=nside)

log.info('{} targets written to {}...t={:.1f}s'.format(len(targets), ns.dest, time()-start))

