#!/usr/bin/env python

from __future__ import print_function, division

import sys
import numpy as np
import fitsio

from desitarget import io
from desitarget.cuts import select_targets
from desitarget.brightmask import mask_targets
from desitarget.QA import _parse_tcnames

from time import time
start = time()

#import warnings
#warnings.simplefilter('error')

import multiprocessing
nproc = multiprocessing.cpu_count() // 2
nside = io.desitarget_nside()

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser(description='Generates DESI SV target bits from Legacy Surveys sweeps or tractor files')
ap.add_argument("src", 
                help="Tractor/sweeps file or root directory with tractor/sweeps files")
ap.add_argument("dest", 
                help="Output target selection file")
ap.add_argument('-m', "--mask", 
                help="If sent then mask the targets, the name of the mask file should be supplied")
ap.add_argument("--numproc", type=int,
                help='number of concurrent processes to use [defaults to {}]'.format(nproc),
                default=nproc)
ap.add_argument('-t','--tcnames', default=None, 
                help="Comma-separated names of target classes to run (e.g. QSO,LRG). Options are ELG, QSO, LRG, MWS, BGS, STD. Default is to run everything)")
ap.add_argument('-i','--iteration', default="1", 
                help="Iteration of SV target selection to run [defaults to 1 for 'sv1']")
ap.add_argument('--nside', type=int,
                help="Process targets in HEALPixels at this resolution (defaults to None). See also the 'healpixels' input flag",
                default=None)
ap.add_argument('--healpixels',
                help="HEALPixels corresponding to `nside` (e.g. '6,21,57'). Only process files that touch these pixels and return targets within these pixels",
                default=None)
ap.add_argument("--bundlefiles", type=int,
                help="(overrides all options but `src`) print slurm script to parallelize, with about this many sweeps files touching each HEALPixel (e.g. 100)",
                default=None)
ap.add_argument("--filespersec", type=float,
                help="estimate of sweeps files completed per second by the (parallelized) code. Used with `bundlefiles` to guess run times (defaults to 0.08)",
                default=0.08)
ap.add_argument('--radecbox',
                help="Only return targets in an RA/Dec box denoted by 'RAmin,RAmax,Decmin,Decmax' in degrees (e.g. '140,150,-10,-20')",
                default=None)
ap.add_argument('--radecrad',
                help="Only return targets in an RA/Dec circle/cap denoted by 'centerRA,centerDec,radius' in degrees (e.g. '140,150,0.5')",
                default=None)

ns = ap.parse_args()
infiles = io.list_sweepfiles(ns.src)
if len(infiles) == 0:
    infiles = io.list_tractorfiles(ns.src)
if len(infiles) == 0:
    log.critical('no sweep or tractor files found')
    sys.exit(1)

survey='sv'+ns.iteration

# ADM Only coded for objects with Gaia matches
# ADM (e.g. DR6 or above). Fail for earlier Data Releases.
# ADM Guard against a single file being passed.
fn = infiles
if ~isinstance(infiles, str):
    fn = infiles[0]
data = fitsio.read(fn, columns=["RELEASE","PMRA"])
if np.any(data["RELEASE"] < 6000):
    log.critical('SV cuts only coded for DR6 or above')
    raise ValueError
if (np.max(data['PMRA']) == 0.) & np.any(data["RELEASE"] < 7000):
    d = "/project/projectdirs/desi/target/gaia_dr2_match_dr6"
    log.info("Zero objects have a proper motion.")
    log.critical(
        "Did you mean to send the Gaia-matched sweeps in, e.g., {}?"
        .format(d)
    )
    raise IOError

if ns.bundlefiles is None:
    log.info("running on {} processors".format(ns.numproc))

# ADM parse the list of HEALPixels in which to run.
pixlist = ns.healpixels
if pixlist is not None:
    pixlist = [ int(pixnum) for pixnum in pixlist.split(',') ]

# ADM parse the list of RA/Dec regions in which to run.
inlists = [ns.radecbox, ns.radecrad]
for i, inlist in enumerate(inlists):
    if inlist is not None:
        inlists[i] = [ float(num) for num in inlist.split(',') ]

# ADM if specific bit names were passed, use them, otherwise run all target classes
tcnames = _parse_tcnames(tcstring=ns.tcnames, add_all=False)

targets = select_targets(infiles, numproc=ns.numproc, 
                         nside=ns.nside, pixlist=pixlist,
                         bundlefiles=ns.bundlefiles, filespersec=ns.filespersec,
                         radecbox=inlists[0], radecrad=inlists[1],
                         tcnames=tcnames, survey=survey)
if ns.mask:
    targets = mask_targets(targets, inmaskfile=ns.mask, nside=nside)

if ns.bundlefiles is None:
    io.write_targets(ns.dest, targets, indir=ns.src, survey=survey,
                     nsidefile=ns.nside, hpxlist=pixlist,
                     qso_selection=survey, nside=nside)
    log.info('{} targets written to {}...t={:.1f}s'.format(len(targets), ns.dest, time()-start))
